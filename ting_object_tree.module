<?php

/**
 * @file
 * Ting smart carousel module main file.
 */

use OpenSearch\OpenSearchTingObjectCollection;


function ting_object_tree_menu()
{
  $items = array();

  $items['alle/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );

  $items['bog/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );

  $items['ebog/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );

  $items['lydbog/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );

  $items['musik/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );

  $items['film/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );

  $items['artikel/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );
  $items['andet/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );
  $items['tidsskrift/%/%/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('access content'),
  );

  $items['ting/objecttreesearch'] = array(
    'title' => 'Retreives count of search results for activated items',
    'page callback' => 'ting_object_tree_search_count',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function ting_object_tree_theme($existing, $type, $theme, $path)
{
  return array(
    'ting_object_tree_item' => array(
      'variables' => array(
        'title' => NULL,
        'creators' => NULL,
        'cover' => NULL,
      ),
      'template' => 'ting-object-tree-item',
      'path' => $path . '/templates',
    ),
    'ting_object_tree_page' => array(
      'variables' => array(
        'items' => NULL,
        'links' => NULL,
        'breadcrumb' => NULL,
        'menu' => NULL,
        'title' => NULL,
        'pager' => NULL,
      ),
      'template' => 'ting-object-tree-page',
      'path' => $path . '/templates',
    ),
    'ting_object_tree_list' => array(
      'variables' => array(
        'items' => NULL,
        'pager' => NULL,
        'title' => NULL,
      ),
      'template' => 'ting-object-tree-list',
      'path' => $path . '/templates',
    ),
    'ting_object_tree_mobile_menu' => array(
      'variables' => array(
        'menu' => NULL,
      ),
      'template' => 'ting-object-tree-mobile-menu',
      'path' => $path . '/templates',
    ),

  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_object_tree_ctools_plugin_directory($module, $plugin)
{
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

function ting_object_tree_show($type, $adult, $fiction, $subject)
{
  $parameters = drupal_get_query_parameters();
  $key = 'alle';
  if (isset($parameters['searchquery'])) {
    $key = $parameters['searchquery'];
  }

  $query = ting_object_tree_get_query($type, $adult, $fiction, $subject, $key);

  //file_put_contents("/var/www/drupalvm/drupal/web/debug/search8.txt", print_r($query, TRUE), FILE_APPEND);
  $page = 1;
  $size = 48;
  if (isset($parameters['page'])) {
    $page = $parameters['page'];
  }

  $result = ting_object_tree_find_entities_with_covers($query, $page, $size, array());
  $breadcrumb = ting_object_tree_get_tree_breadcrumb($type, $adult, $fiction, $subject);
  $menu_links = ting_object_tree_get_menu_links($key);

  // $menu_links[1346]['#attributes']['class'] = 'test';
  // $menu_links[1346]['#localized_options']['query'] = array('searchquery' => 'venus');
  $menu = drupal_render($menu_links);
  $title = ucfirst($subject);
  drupal_add_js(drupal_get_path('module', 'ting_object_tree') . '/js/object_tree_categories.js', 'file');

  file_put_contents("/var/www/drupalvm/drupal/web/debug/search10.txt", print_r($menu_links, TRUE), FILE_APPEND);
  return theme('ting_object_tree_page', array('items' => $result['objects'], 'links' =>  $result['links'], 'breadcrumb' => $breadcrumb, 'menu' => $menu, 'title' => $title, 'pager' => $result['pager']));
}

function ting_object_tree_get_menu_links($key)
{
  $active_menu_items = array();
  $menu_data = menu_tree_page_data('menu-menu-object-navigation', NULL, TRUE);
  $menu_links = menu_tree_output($menu_data);
  file_put_contents("/var/www/drupalvm/drupal/web/debug/search15.txt", print_r($menu_links, TRUE), FILE_APPEND);

  foreach ($menu_links as $menu_key => $menu_item) {
    if (!(substr_compare($menu_key, '#', 0, strlen('#')) === 0)) {
      $menu_links[$menu_key] = ting_object_tree_handle_menu_link($menu_item, $key, $menu_key, $active_menu_items);
    }
  }
  drupal_add_js(drupal_get_path('module', 'ting_object_tree') . '/js/ting-object-tree.js');
  drupal_add_js(array('tingObjectTreeSearch' => array('active' => $active_menu_items)), 'setting');
  file_put_contents("/var/www/drupalvm/drupal/web/debug/search17.txt", print_r($active_menu_items, TRUE), FILE_APPEND);
  file_put_contents("/var/www/drupalvm/drupal/web/debug/search1.txt", print_r($menu_data, TRUE), FILE_APPEND);
  return $menu_links;
}

function ting_object_tree_handle_menu_link($menu_item, $key, $menu_key, &$active_menu_items)
{
  if ($key != 'alle') {
    $menu_item['#localized_options']['query'] = array('searchquery' => $key);
  }
  $menu_item['#attributes']['id'] = 'search-menu-' . $menu_key;
  $active_menu_items[$menu_key] = array('href' => $menu_item['#href'], 'searchquery' => $key);
  file_put_contents("/var/www/drupalvm/drupal/web/debug/search12.txt", print_r($menu_item, TRUE), FILE_APPEND);
  if (!empty($menu_item['#below'])) {
    file_put_contents("/var/www/drupalvm/drupal/web/debug/search16.txt", print_r($menu_item['#below'], TRUE), FILE_APPEND);
    foreach ($menu_item['#below'] as $menu_key =>  $menu_item_below) {
      if (!(substr_compare($menu_key, '#', 0, strlen('#')) === 0)) {
        $menu_item['#below'][$menu_key]  = ting_object_tree_handle_menu_link($menu_item_below, $key, $menu_key, $active_menu_items);
      }
    }
  }
  return $menu_item;
}

function ting_object_tree_is_on_path()
{
  $items = ting_object_tree_menu();
  $keys = array_keys($items);
  $path = current_path();
  file_put_contents("/var/www/drupalvm/drupal/web/debug/search4.txt", print_r($path, TRUE), FILE_APPEND);
  foreach ($keys as $key) {
    $parts = explode('/', $key);
    if (substr_compare($path, $parts[0], 0, strlen($parts[0])) === 0) {
      file_put_contents("/var/www/drupalvm/drupal/web/debug/search5.txt", print_r($key, TRUE), FILE_APPEND);
      return true;
    }
  }
  return false;
}

function ting_object_tree_get_path()
{
  if (isset($_GET['currentpage'])) {
    return $_GET['currentpage'];
  } else {
    return 'alle/alle/alle/alle';
  }
}

function ting_object_tree_get_query($type, $adult, $fiction, $subject, $key)
{
  $query = ting_object_tree_get_type($type);
  if ($adult == 'børn') {
    $query .= ' and facet.category="børnematerialer"';
  } elseif ($adult != 'alle') {
    $query .= ' and facet.category="voksenmaterialer"';
  }
  if ($fiction == 'fag') {
    $query .= ' and facet.genreCategory="nonfiktion"';
  } elseif ($fiction != 'alle') {
    $query .= ' and facet.genreCategory="fiktion"';
  }
  if ($subject != 'alle') {
    $query .= ' and facet.subject="' . $subject . '"';
  }

  if ($key != 'alle') {
    $query .= ' and ' . $key;
  }

  //file_put_contents("/var/www/drupal7vm/drupal/debug/newobj.txt", print_r($query . "\n", TRUE), FILE_APPEND);
  return $query;
}

function ting_object_tree_get_type($type)
{
  $types = ting_object_tree_get_material_types();
  if (array_key_exists($type, $types)) {
    $query = 'facet.type=("' . implode('" or "', $types[$type]) . '")';
    return $query;
  }
  return '*';
}

function ting_object_tree_get_material_types()
{
  $types = array(
    'bog' => array('bog', 'billedbog', 'tegneserie'),
    'ebog' => array('ebog', 'billedbog (net)'),
    'lydbog' => array('lydbog (net)', 'lydbog (cd-mp3)', 'lyd (podcast)', 'lydbog (cd)'),
    'musik' => array('cd (musik)', 'node', 'grammofonplade'),
    'film' => array('film (net)', 'dvd', 'blu-ray', 'film'),
    'artikel' => array('artikel', 'netdokument',),
    'tidsskrift' => array('tidsskrift (net)', 'avis (net)', 'tidsskrift', 'periodikum'),

  );
  return $types;
}


/**
 * Find ting entities with covers from a query.
 *
 * @param string $query
 *   Query to use.
 * @param int $start
 *   Offset to start from.
 * @param int $size
 *   Search chunk size to use.
 * @param array $ignore
 *   Material ids to skip.
 *
 * @return array
 *   Array of found ting entities (an array), next start to use, and whether
 *   the result end was reached.
 */
function ting_object_tree_find_entities_with_covers($query, $page, $size, array $ignore)
{
  $entities_found_with_covers = array();
  $finished = FALSE;
  $entities = array();

  $sal_query = ting_start_query()
    ->withRawQuery($query)
    // ->withFacets(array('facet.subject'))
    //->withTermsPrFacet(26)
    ->withSort('date_descending')
    ->withPage($page)
    ->withCount($size)
    ->withMaterialFilter($ignore, FALSE);

  //$sal_query->reply_only = true;
  $results = $sal_query->execute();
  //file_put_contents("/var/www/drupal7vm/drupal/debug/newcar3.txt", print_r($results , TRUE), FILE_APPEND);
  if (!$results->hasMoreResults()) {
    $finished = TRUE;
  }
  $collections = $results->getTingEntityCollections();


  $collections = $results->getTingEntityCollections();
  foreach ($results->openSearchResult->collections as $collection) {
    $object = $collection->getPrimary_object();
    $entities[$object->getId()] = $object;
  }
  //file_put_contents("/var/www/drupal7vm/drupal/debug/newobj2.txt", print_r($entities, TRUE), FILE_APPEND);
  // See what materials have covers.
  $covers = ting_covers_get(array_keys($entities));

  $objects =  ting_object_tree_proces_results($entities);
  $links = array(); //ting_object_tree_get_subjects($results);
  $pager = ting_object_tree_pager($results);
  $result = array(
    'objects' => $objects,
    'links' => $links,
    'pager' => $pager,
  );

  return $result;
}

function ting_object_tree_pager($results)
{
  $pager_prev = '';
  $pager_next = '';
  $parameters = drupal_get_query_parameters();
  $path = request_path();
  $page = 1;

  if (isset($parameters['page'])) {
    $page = $parameters['page'];
  }
  if ($page > 1) {
    $prev_page = $page - 1;
    $options = array('query' => array('page' => $prev_page));
    $link = l('Forrige', $path, $options);
    $pager_prev = '<div class="ting-object-tree-objects-previous more-link">' . $link . '</div>';
  }
  if ($results->hasMoreResults()) {
    $next_page = $page + 1;
    $options = array('query' => array('page' => $next_page));
    $link = l('Næste', $path, $options);
    $pager_next = '<div class="ting-object-tree-objects-next more-link">' . $link . '</div>';
  }
  return $pager_prev . $pager_next;
}

function ting_object_tree_proces_results(array $objects)
{
  $items = array();
  foreach ($objects as $object) {
    $cover = ting_object_tree_get_cover($object);
    $creators = ting_object_tree_get_creators($object);
    $items[] = theme('ting_object_tree_item', array('title' => $object->getTingObject()->getShortTitle(), 'creators' => $creators, 'cover' => $cover,));
  }
  return $items;
}

function ting_object_tree_get_cover($object)
{
  $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ding_list_medium')));
  $options = array(
    'html' => TRUE,
    'attributes' => array('title' => $object->getTitle()),
  );
  return l($image, ting_object_tree_uri($object), $options);
}
function ting_object_tree_get_creators($object)
{
  if (count($object->getCreators())) {
    if ($object->getDate() != '') {
      $markup_string = t('By !author_link (@year)', array(
        '!author_link' => implode(', ', $object->getCreators()),
        // So wrong, but appears to be the way the data is.
        '@year' => $object->getDate(),
      ));
    } else {
      $markup_string = t('By !author_link', array(
        '!author_link' => implode(', ', $object->getCreators()),
      ));
    }
  } elseif ($object->getDate() != '') {
    $markup_string = t('(@year)', array('@year' => $object->getDate()));
  }
  return $markup_string;
}

function ting_object_tree_uri($object)
{
  return 'ting/collection/' . $object->id;
}

function ting_object_tree_get_subjects($results)
{
  $facets = $results->getFacets();
  $path = request_path();
  $path_elements = explode('/', $path);
  $current = end($path_elements);
  $links = array();
  foreach ($facets['facet.subject']->getTerms() as $term) {
    if ($term->getName() != $current) {
      $links[] = l($term->getName() . ' (' . $term->getCount() . ')', $path . '/' . $term->getName());
    }
  }
  return $links;
}

function ting_object_tree_get_tree_breadcrumb($type, $adult, $fiction, $subject)
{
  $links = array();
  $links[] = l(ucfirst($type), '/' . $type . '/alle/alle/alle');
  if ($adult != 'alle') {
    $links[] = l(ucfirst($adult), '/' . $type . '/' . $adult . '/alle/alle');
  }
  if ($fiction != 'alle') {
    $links[] = l(ucfirst($fiction), '/' . $type . '/' . $adult . '/' . $fiction . '/alle');
  }
  if ($subject != 'alle') {
    $links[] = l(ucfirst($subject), '/' . $type . '/' . $adult . '/' . $fiction . '/' . $subject);
  }
  $bread_crumb = implode('<span class="ting-object-tree-breadcrumb-icon"></span>', $links);
  return $bread_crumb;
}


function ting_object_tree_get_breadcrumb($object)
{
  $ting_object = $object->getTingObject();
  $type = ting_object_tree_get_breadcrumb_type($ting_object);
  $audience = $ting_object->getAudience();
  if (isset($audience) && $audience[0] == 'børnematerialer') {
    $audience = 'børn';
  } else {
    $audience = 'voksen';
  }

  if ($ting_object->isFiction()) {
    $fiction = 'skøn';
  } else {
    $fiction = 'fag';
  }
  $subject = ting_object_tree_get_subject($ting_object);

  $bread_crumb = ting_object_tree_get_tree_breadcrumb($type, $audience, $fiction, $subject); //l($link_text, $path);

  return $bread_crumb;
}

function ting_object_tree_get_breadcrumb_type($object)
{
  $type = $object->getType();
  $types = ting_object_tree_get_material_types();
  foreach ($types as $key => $material_type) {
    if (in_array(strtolower($type), $material_type)) {
      return $key;
    }
  }
  return 'andet';
}

function ting_object_tree_get_subject($object)
{
  $subject = null;
  $subjects = $object->getSubjects();
  $genre = $object->getGenre();

  if (isset($genre) && !empty($genre)) {
    $subject = $genre[0];
    //file_put_contents("/var/www/drupal7vm/drupal/debug/path21.txt", print_r($genre  , TRUE), FILE_APPEND);
  } elseif (isset($subjects) && !empty($subjects)) {
    $subject = ting_object_tree_choose_subject($subjects);
  } else {
    $subject = 'ingetemne';
  }
  //file_put_contents("/var/www/drupal7vm/drupal/debug/path22.txt", print_r($subject  , TRUE), FILE_APPEND);
  return $subject;
}

function ting_object_tree_choose_subject($subjects)
{
  $subject_list = variable_get('ting_object_tree_subject_list');
  if (!(isset($subject_list))) {
    $module_path = drupal_get_path('module', 'ting_object_tree');
    $data = file_get_contents($module_path . '/data/serialized_subjects.txt');
    if (isset($data)) {
      $subject_list = unserialize($data);
    }
    variable_set('ting_object_tree_subject_list', $subject_list);
  }

  $subject_on_list = array();
  foreach ($subjects as $subject) {
    if (array_key_exists($subject, $subject_list)) {
      $subject_on_list[$subject] = $subject_list[$subject];
    }
  }
  if (!(empty($subject_on_list))) {
    arsort($subject_on_list);
    $keys = array_keys($subject_on_list);
    return $keys[0];
  } else {
    return $subjects[0];
  }

  //file_put_contents("/var/www/drupal7vm/drupal/debug/newobj8.txt", print_r($subject_list, TRUE), FILE_APPEND);
}


function ting_object_tree_get_current_path()
{
  $elements = array();
  $path = request_path();
  $path_elements = explode('/', $path);
  if (count($path_elements) < 4) {
    return NULL;
  }
  $elements['type'] = $path_elements[0];
  $elements['audience'] = $path_elements[1];
  $elements['fiction'] = $path_elements[2];
  $elements['subject'] = $path_elements[3];

  return $elements;
}

/**
 * Get covers for an array of ids.
 *
 * @param array $requested_covers
 *   Ids of entities to return covers for.
 *
 * @return array
 *   Array of id => file path for found covers.
 */
function ting_object_tree_covers_get(array $requested_covers)
{
  $entities = array();
  $covers = array();

  // Create array of loaded entities for passing to hooks.
  foreach ($requested_covers as $id) {
    // Ensure that the id at least seems valid.
    if (!mb_check_encoding($id, "UTF-8")) {
      continue;
    }

    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $id, FALSE)) {
      continue;
    }

    // If we we already have a valid cover image, use it.
    $path = ting_covers_object_path($id);
    if (file_exists($path)) {
      $covers[$id] = $path;
      continue;
    }

    // Queue for fetching by hook.
    $entities[$id] = ''; //ding_entity_load($id);
  }

  // Fetch covers by calling hook.
  foreach (module_implements('ting_covers') as $module) {
    foreach (module_invoke($module, 'ting_covers', $entities) as $id => $uri) {
      if ($uri && $path = _ting_covers_get_file($id, $uri)) {
        $covers[$id] = $path;
      }
      // Remove elements where a cover has been found, or suppressed.
      unset($entities[$id]);
    }
  }

  // Mark all remaining as not found in cache.
  foreach ($entities as $id => $entity) {
    cache_set('ting_covers:' . $id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
  }

  return $covers;
}

function ting_object_tree_search_count()
{
  //$results = ting_expansion_search_multi($query);
  $queries = array();
  $active_items = $_POST;
  if (isset($active_items) && !empty($active_items)) {
    foreach ($active_items as $key => $item) {
      $queries[] = array(
        'query' => ting_object_tree_get_active_query($item['href'], $item['searchquery']),
        'key' => $key,

      );
    }
  }
  file_put_contents("/var/www/drupalvm/drupal/web/debug/search20.txt", print_r($_POST, TRUE), FILE_APPEND);
  file_put_contents("/var/www/drupalvm/drupal/web/debug/search21.txt", print_r($queries, TRUE), FILE_APPEND);
  $results = ting_object_tree_search_multi($queries);
  return drupal_json_output($results);
}

function ting_object_tree_get_active_query($url, $search_query)
{
  if (isset($url)) {
    $parts = explode('/', $url);
    return ting_object_tree_get_query($parts[0], $parts[1], $parts[2], $parts[3], $search_query);
  }
  return '';
}

function ting_object_tree_search_multi($queries)
{
  $multi_request = new TingClientMultiRequestAdapter();
  $req = array();
  $profiles = array('min', 'ebog', 'digart',  'digfag');

  foreach ($queries as $query) {
    $request = opensearch_get_request_factory()->getSearchRequest();

    $request->setQuery($query['query'] . ' and holdingsitem.agencyid=' . variable_get('ting_agency', '773000'));
    if ($agency = variable_get('ting_agency', FALSE)) {
      $request->setAgency($agency);
    }
    $request->setStart(1);
    $request->setNumResults(0);

    $request->setProfile('opac');
    $req[] = $request;
  }

  $results = $multi_request->execute($req);
  file_put_contents("/var/www/drupalvm/drupal/web/debug/multi1.txt", print_r($results, TRUE), FILE_APPEND);

  $res = array();
  $i = 0;
  foreach ($results as $result) {
    $response = $req[$i]->parseResponse($result);
    $key = 'search-menu-' . $queries[$i]['key'];
    $res[$key] = $response->numTotalObjects; //The search result come back in the same order as the requests.
    $i++;
  }
  file_put_contents("/var/www/drupalvm/drupal/web/debug/multi2.txt", print_r($res, TRUE), FILE_APPEND);
  return $res;
}
